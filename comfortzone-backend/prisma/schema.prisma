generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Update User model to include direct messages
model User {
  id             String         @id @default(cuid())
  email          String         @unique
  password       String
  username       String         @unique
  profilePicture String?
  bio            String?        @default("no bio")
  emailVerified  Boolean        @default(false)
  verificationToken String?     @unique
  verificationTokenExpiry DateTime?
  groups         GroupMember[]
  completions    ChallengeCompletion[]
  messages       GroupMessage[]
  sentInvites    MessageCenter[] @relation("SentInvites")
  receivedInvites MessageCenter[] @relation("ReceivedInvites")
  friends        Friendship[]    @relation("UserFriends")
  friendOf       Friendship[]    @relation("FriendOfUser")
  posts          Post[]
  
  // Add these relations for direct messages
  sentDirectMessages     DirectMessage[] @relation("SentDirectMessages")
  receivedDirectMessages DirectMessage[] @relation("ReceivedDirectMessages")
}


model Group {
  id              String         @id @default(cuid())
  name            String
  description     String?
  createdAt       DateTime       @default(now())
  members         GroupMember[]
  challenges      Challenge[]
  messages        GroupMessage[]
  invites         MessageCenter[] // Added this line
}

model GroupMember {
  id        String   @id @default(cuid())
  userId    String
  groupId   String
  joinedAt  DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}


model Challenge {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  groupId     String?
  group       Group?   @relation(fields: [groupId], references: [id])
  completions ChallengeCompletion[] // Added this relation

  @@unique([groupId, date])
}

model ChallengeCompletion {
  id         String   @id @default(cuid())
  userId     String
  date       DateTime
  completed  Boolean  @default(true)
  completedAt DateTime @default(now())
  challengeId String 
  challenge  Challenge @relation(fields: [challengeId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  @@unique([userId, date])
}

// New model for group messages
model GroupMessage {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  groupId   String
  user      User     @relation(fields: [userId], references: [id])
  group     Group    @relation(fields: [groupId], references: [id])
}

model MessageCenter {
  id          String   @id @default(cuid())
  senderId    String
  recipientEmail String
  groupId     String?
  message     String   @default("You've been invited to join this group!")
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
  accepted    Boolean? // null = pending, true = accepted, false = declined
  sender      User     @relation("SentInvites", fields: [senderId], references: [id])
  recipient   User?    @relation("ReceivedInvites", fields: [recipientEmail], references: [email])
  group       Group?   @relation(fields: [groupId], references: [id])
  type        String   @default("group_invite") // New field to distinguish between group invites and friend requests

  @@unique([senderId, recipientEmail, groupId])
  @@unique([senderId, recipientEmail, type])
}

model Friendship {
  id                String   @id @default(cuid())
  userId            String
  friendId          String
  createdAt         DateTime @default(now())
  lastMessageTime   DateTime? // Track when the last message was sent in this friendship
  user              User     @relation("UserFriends", fields: [userId], references: [id])
  friend            User     @relation("FriendOfUser", fields: [friendId], references: [id])

  @@unique([userId, friendId])
}

model Post {
  id          String   @id @default(cuid())
  userId      String
  content     String
  image       String?
  isPublic    Boolean  @default(true) // true for public, false for friends-only
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

// Add this new model for direct messages
model DirectMessage {
  id            String   @id @default(cuid())
  content       String
  createdAt     DateTime @default(now())
  senderId      String
  recipientId   String
  read          Boolean  @default(false)
  sender        User     @relation("SentDirectMessages", fields: [senderId], references: [id])
  recipient     User     @relation("ReceivedDirectMessages", fields: [recipientId], references: [id])

  @@index([senderId])
  @@index([recipientId])
}